/* eslint-disable no-var */
/* eslint-disable prefer-const */
import { PGlite } from "@electric-sql/pglite";
import { drizzle, PgliteDatabase } from "drizzle-orm/pglite";
import * as schema from "./schema";

declare global {
  var db: PgliteDatabase<typeof schema> | undefined;
  var client: PGlite | undefined;
}

if (!global.client) global.client = new PGlite("idb://twt-data");
export let client: PGlite;
client = global.client;

if (!global.db) global.db = drizzle(client, { schema });
export let db: PgliteDatabase<typeof schema>;
db = global.db;

/**
 * Executes the database migration.
 *
 * The query is manually generated by the drizzle-kit since the app is run in a browser.
 */
export async function migrate() {
  // generated by drizzle-kit
  const query = `CREATE TABLE IF NOT EXISTS "media" (
    "id" varchar PRIMARY KEY NOT NULL,
    "tweet_id" varchar,
    "url" varchar,
    "type" varchar,
    "created_at" timestamp
  );
  --> statement-breakpoint
  CREATE TABLE IF NOT EXISTS "tweets" (
    "id" varchar PRIMARY KEY NOT NULL,
    "text" varchar,
    "retweet" integer,
    "likes" integer,
    "is_reply" boolean,
    "is_retweet" boolean,
    "is_self_reply" boolean,
    "created_at" timestamp
  );
  --> statement-breakpoint
  DO $$ BEGIN
   ALTER TABLE "media" ADD CONSTRAINT "media_tweet_id_tweets_id_fk" FOREIGN KEY ("tweet_id") REFERENCES "public"."tweets"("id") ON DELETE cascade ON UPDATE cascade;
  EXCEPTION
   WHEN duplicate_object THEN null;
  END $$;`;

  await client.exec(query);
}

/**
 * Delete all tables and remigrate the database.
 */
export async function clear() {
  const query = `DO $$ DECLARE
    r RECORD;
  BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = current_schema()) LOOP
      EXECUTE 'DROP TABLE IF EXISTS ' || r.tablename || ' CASCADE';
    END LOOP;
  END $$;
  `;
  await client.exec(query);
  await migrate();
}
